"use client";

import confetti, { type Shape } from "canvas-confetti";
import { useTranslations } from "next-intl";
import { type ComponentProps, useCallback, useEffect, useState } from "react";

import { toast } from "@/uva/toaster";

import { PROJECT_EMOJIS } from "@/lib/setup";
import { cn } from "@/lib/utils";

const konamiCode = [
  "ArrowUp",
  "ArrowUp",
  "ArrowDown",
  "ArrowDown",
  "ArrowLeft",
  "ArrowRight",
  "ArrowLeft",
  "ArrowRight",
  "B",
  "A",
];

export function KonamiCode({ className, ...props }: ComponentProps<"svg">) {
  const t = useTranslations("utils");
  const [, setInput] = useState<string[]>([]);
  const [emojis, setEmojis] = useState<Shape[]>([]);
  const [progress, setProgress] = useState(0);
  const [mustShake, setMustShake] = useState(false);
  const [mustBlink, setMustBlink] = useState(false);
  const doShake = () => {
    setMustShake(true);
    setTimeout(() => {
      setMustShake(false);
      setMustBlink(true);
      setTimeout(() => setMustBlink(false), 3100);
    }, 600);
  };
  useEffect(
    () =>
      setEmojis(
        [
          "👽", //
          "⚛️",
          "🤍",
          "💚",
          "💙",
          "🦀",
          ...PROJECT_EMOJIS,
        ].map((emoji) =>
          confetti //
            .shapeFromText({
              text: emoji,
              scalar: 2.5,
            }),
        ),
      ),
    [],
  );
  const triggerEasterEgg = useCallback(() => {
    toast(t("easterEgg"));
    confetti({
      shapes: emojis,
      angle: 90,
      ticks: 720,
      scalar: 2.5,
      spread: 180,
      decay: 0.933,
      gravity: 0.5,
      origin: { y: 1 },
      particleCount: 120,
      startVelocity: 60,
    });
    setTimeout(() => setProgress(0), 1000);
  }, [t, emojis]);
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      setInput((prev) => {
        const newInput = [...prev, e.key].slice(-konamiCode.length);
        let p = 0;
        for (let k = newInput.length; k > 0; k--) {
          const suffix = newInput
            .slice(-k)
            .map((s) => s.toLowerCase())
            .join("");
          const prefix = konamiCode
            .slice(0, k)
            .map((s) => s.toLowerCase())
            .join("");
          if (suffix === prefix) {
            p = k;
            break;
          }
        }
        setProgress(p);
        if (p === 0) doShake();
        if (p === konamiCode.length) {
          triggerEasterEgg();
          return [];
        }
        return newInput;
      });
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [t, emojis, triggerEasterEgg]);
  function handlePathClick(i: number) {
    if (i === progress) {
      const next = progress + 1;
      setProgress(next);
      if (next === konamiCode.length) {
        triggerEasterEgg();
      }
    } else {
      setProgress(0);
      doShake();
    }
  }
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 360 30"
      fill="currentColor"
      className={cn({ "animate-shake": mustShake }, className)}
      {...props}
    >
      {[
        "M14.817.047C6.647.047 0 6.68 0 14.833s6.647 14.786 14.817 14.786 14.817-6.633 14.817-14.786S22.987.047 14.817.047Zm0 27.473c-7.01 0-12.714-5.691-12.714-12.687S7.807 2.146 14.817 2.146 27.53 7.837 27.53 14.833 21.827 27.52 14.817 27.52Zm6.002-13.429c.411.41.411 1.074 0 1.484-.205.205-.475.307-.744.307s-.538-.102-.744-.307l-3.462-3.455v7.96c0 .58-.471 1.05-1.052 1.05s-1.052-.469-1.052-1.05v-7.961l-3.463 3.455c-.411.41-1.076.41-1.487 0s-.411-1.074 0-1.484l5.258-5.247c.096-.096.212-.174.34-.227.127-.053.264-.081.405-.081s.278.029.405.081c.128.053.243.13.34.227l5.257 5.247Z",
        "M51.524.142c-8.17 0-14.817 6.633-14.817 14.786s6.647 14.786 14.817 14.786 14.817-6.633 14.817-14.786S59.695.142 51.524.142Zm0 27.474c-7.01 0-12.713-5.691-12.713-12.687S44.514 2.242 51.524 2.242s12.714 5.691 12.714 12.687-5.704 12.687-12.714 12.687Zm6.002-13.429c.411.41.411 1.074 0 1.484-.205.205-.475.307-.744.307s-.538-.102-.744-.307l-3.463-3.455v7.961c0 .58-.471 1.05-1.052 1.05s-1.052-.469-1.052-1.05v-7.961l-3.463 3.455c-.411.41-1.076.41-1.487 0s-.411-1.074 0-1.484l5.258-5.246c.097-.097.214-.174.343-.227.257-.106.546-.106.803 0 .129.053.246.13.343.227l5.258 5.246Z",
        "M88.232.191c-8.17 0-14.817 6.633-14.817 14.785s6.647 14.786 14.817 14.786 14.817-6.633 14.817-14.786S96.402.191 88.232.191Zm0 27.472c-7.01 0-12.714-5.691-12.714-12.687S81.222 2.29 88.232 2.29s12.713 5.691 12.713 12.686-5.703 12.687-12.713 12.687Zm6.001-13.429c.411.41.411 1.074 0 1.484l-5.257 5.247c-.096.096-.212.173-.34.227-.127.053-.264.082-.405.082s-.278-.029-.405-.082c-.128-.053-.243-.13-.34-.227l-5.258-5.247c-.411-.41-.411-1.074 0-1.484s1.077-.41 1.487 0l3.463 3.455V9.728c0-.58.471-1.05 1.052-1.05s1.052.469 1.052 1.05v7.96l3.462-3.455c.411-.41 1.076-.41 1.487 0Z",
        "M124.939.238c-8.17 0-14.817 6.633-14.817 14.786s6.647 14.785 14.817 14.785 14.817-6.633 14.817-14.785S133.109.238 124.939.238Zm0 27.472c-7.01 0-12.713-5.691-12.713-12.686s5.703-12.687 12.713-12.687 12.714 5.691 12.714 12.687-5.703 12.686-12.714 12.686Zm6.002-13.428c.411.41.411 1.074 0 1.484l-5.258 5.245c-.097.097-.214.174-.343.227-.128.053-.265.081-.402.081s-.273-.028-.402-.081-.245-.13-.343-.227l-5.257-5.245c-.411-.41-.411-1.074 0-1.484s1.076-.41 1.487 0l3.462 3.455v-7.96c0-.58.471-1.05 1.052-1.05s1.052.469 1.052 1.05v7.96l3.463-3.455c.411-.41 1.077-.41 1.487 0Z",
        "M161.646.095c-8.17 0-14.817 6.633-14.817 14.786s6.647 14.785 14.817 14.785 14.817-6.633 14.817-14.785S169.816.095 161.646.095Zm0 27.473c-7.01 0-12.713-5.691-12.713-12.686s5.703-12.687 12.713-12.687 12.714 5.691 12.714 12.687-5.703 12.686-12.714 12.686Zm6.31-12.686c0 .58-.47 1.05-1.052 1.05h-7.976l3.462 3.454c.411.41.411 1.074 0 1.484-.205.205-.475.307-.744.307s-.538-.103-.744-.307l-5.256-5.245c-.098-.097-.175-.213-.228-.343-.106-.256-.106-.545 0-.802.054-.129.131-.246.228-.343l5.256-5.246c.411-.41 1.077-.41 1.487 0 .411.41.411 1.074 0 1.484l-3.462 3.455h7.977c.581 0 1.052.469 1.052 1.05Z",
        "M198.354.285c-8.17 0-14.817 6.633-14.817 14.786s6.647 14.786 14.817 14.786 14.816-6.633 14.816-14.786S206.523.285 198.354.285Zm0 27.473c-7.011 0-12.714-5.691-12.714-12.687s5.703-12.687 12.714-12.687 12.713 5.691 12.713 12.687-5.703 12.687-12.713 12.687Zm6.229-13.088c.106.256.106.545 0 .802-.054.129-.131.246-.229.343l-5.257 5.246c-.205.205-.475.308-.744.308s-.538-.103-.744-.308c-.411-.41-.411-1.074 0-1.484l3.463-3.455h-7.977c-.581 0-1.052-.469-1.052-1.05s.47-1.05 1.052-1.05h7.977l-3.463-3.455c-.411-.41-.411-1.074 0-1.484s1.077-.41 1.487 0l5.257 5.246c.098.097.175.214.229.343Z",
        "M235.061.38c-8.17 0-14.817 6.633-14.817 14.786s6.647 14.785 14.817 14.785 14.817-6.633 14.817-14.785S243.231.38 235.061.38Zm0 27.473c-7.011 0-12.714-5.691-12.714-12.686S228.05 2.48 235.061 2.48s12.714 5.691 12.714 12.687-5.703 12.686-12.714 12.686Zm6.31-12.686c0 .58-.47 1.05-1.052 1.05h-7.977l3.463 3.455c.411.41.411 1.074 0 1.484-.205.205-.475.307-.744.307s-.538-.102-.744-.307l-5.257-5.246c-.098-.097-.175-.213-.228-.343-.106-.256-.106-.545 0-.802.054-.129.131-.246.228-.343l5.257-5.246c.411-.41 1.077-.41 1.487 0 .411.41.411 1.074 0 1.484l-3.463 3.455h7.977c.581 0 1.052.469 1.052 1.05Z",
        "M271.768.427c-8.169 0-14.816 6.633-14.816 14.786s6.647 14.786 14.816 14.786 14.817-6.633 14.817-14.786S279.938.427 271.768.427Zm0 27.474c-7.01 0-12.713-5.691-12.713-12.687s5.703-12.687 12.713-12.687 12.714 5.691 12.714 12.687-5.703 12.687-12.714 12.687Zm6.229-13.088c.106.256.106.545 0 .802-.054.129-.131.246-.229.343l-5.257 5.246c-.205.205-.475.307-.744.307s-.538-.102-.744-.307c-.411-.41-.411-1.074 0-1.484l3.463-3.455h-7.977c-.581 0-1.052-.469-1.052-1.05s.47-1.05 1.052-1.05h7.977l-3.463-3.455c-.411-.41-.411-1.074 0-1.484s1.076-.41 1.487 0l5.257 5.246c.098.097.175.214.229.343Z",
        "M308.476 0c-8.17 0-14.817 6.633-14.817 14.786s6.647 14.786 14.817 14.786 14.816-6.633 14.816-14.786S316.645 0 308.476 0Zm0 27.473c-7.011 0-12.714-5.691-12.714-12.687s5.703-12.687 12.714-12.687 12.713 5.691 12.713 12.687-5.703 12.687-12.713 12.687Zm3.848-13.003c.512-.63.819-1.434.819-2.307 0-2.026-1.652-3.673-3.682-3.673h-4.601c-.943 0-1.709.765-1.709 1.706v9.182c0 .941.766 1.706 1.709 1.706h5.258c2.03 0 3.682-1.648 3.682-3.674 0-1.2-.58-2.268-1.476-2.94Zm-7.07-3.881h4.206c.87 0 1.578.706 1.578 1.573s-.708 1.574-1.578 1.574h-4.206v-3.148Zm4.864 8.395h-4.864v-3.148h4.864c.87 0 1.578.706 1.578 1.573s-.708 1.574-1.578 1.574Z",
        "M345.183.333c-8.17 0-14.817 6.633-14.817 14.785s6.647 14.786 14.817 14.786S360 23.271 360 15.118 353.353.333 345.183.333Zm0 27.472c-7.011 0-12.714-5.691-12.714-12.687s5.703-12.686 12.714-12.686 12.714 5.691 12.714 12.686-5.703 12.687-12.714 12.687Zm1.456-18.013c-.16-.386-.463-.689-.848-.849-.388-.16-.818-.162-1.21-.002-.388.16-.691.461-.854.85l-4.248 10.171c-.224.535.03 1.15.566 1.372.133.055.269.081.405.081.412 0 .802-.243.971-.646l1.046-2.503h5.434l1.046 2.503c.224.536.84.789 1.375.565.536-.222.79-.837.566-1.372l-4.247-10.169Zm-3.297 6.375 1.84-4.406 1.84 4.406h-3.68Z",
      ].map((d, i) => (
        <path
          key={i}
          d={d}
          onClick={() => handlePathClick(i)}
          style={{ pointerEvents: "bounding-box" as never }}
          className={cn(
            {
              "opacity-50": i >= progress,
              "animate-blink": mustBlink && i == 0,
            },
            "transition-opacity",
            "cursor-pointer",
          )}
        />
      ))}
    </svg>
  );
}
